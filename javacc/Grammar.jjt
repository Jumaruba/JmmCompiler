options
{
    LOOKAHEAD = 1;
    NODE_SCOPE_HOOK=true;
}
PARSER_BEGIN(Grammar)

import pt.up.fe.comp.jmm.report.Report;
import pt.up.fe.comp.jmm.report.ReportType;
import pt.up.fe.comp.jmm.report.Stage;
import java.util.*;

public class Grammar{
    private List<Report> reportList = new ArrayList<Report>();
    private Boolean hasError = false ;
    public List<Report> getReportList(){
        return this.reportList;
    }

    public Boolean getHasError(){
        return this.hasError;
    }

     void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode)n).put("line", Integer.toString(getToken(1).beginLine));
        ((SimpleNode)n).put("col", Integer.toString(getToken(1).beginColumn));
    }

    void jjtreeCloseNodeScope(Node n) {
    }

}

PARSER_END(Grammar)

// See https://javacc.github.io/javacc/tutorials/token-manager.html
// Special tokens are like tokens, except that they are permitted to appear anywhere in the input file.
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT:"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
}

SKIP :
{
	" " | "\r" | "\t"  | "\n"
	| "/*" : WithinComment
}

// Goes to the withinComment state.
<WithinComment> SKIP:
{
    "*/": DEFAULT   // Exiting the skip state.
}

// Continues on the WithinState while...
<WithinComment> MORE : {
    <~[]>
}

TOKEN:
{
    <IMPORT: "import">

    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < INTBRACKETS: "int[]">
    |   < STRING: "String" >

    |   < COMMA: "," >
    |   < DOT: ".">
    |   < COLON: ":" >
    |   < SEMICOLON: ";" >
    |   < OPENSQUAREBRACKET: "[">
    |   < CLOSESQUAREBRACKET: "]">
    |   < OPENCURVEBRACKET: "(">
    |   < CLOSECURVEBRACKET: ")">
    |   < OPENBRACKET: "{">
    |   < CLOSEBRACKET: "}">

    |   < CLASS: "class">
    |   < PUBLIC: "public">
    |   < STATIC: "static">
    |   < VOID: "void">
    |   < MAIN: "main">
    |   < PRINTLN: "System.out.println" >
    |   < THIS: "this" >
    |   < EXTENDS: "extends" >
    |   < RETURN: "return" >
    |   < LENGTH: "length">
    |   < NEW: "new">

    |   < TRUE: "true">
    |   < FALSE: "false">
    |   < NOT: "!">
    |   < AND: "&&">
    |   < LESS: "<" >
    |   < SUM: "+">
    |   < SUB: "-">
    |   < MULT: "*">
    |   < DIV: "/">
    |   < EQUALS: "=">


    |   < IF: "if">
    |   < ELSE: "else">
    |   < WHILE: "while">

    |   < IDENTIFIER:  ("$" | <LETTER>) ("_" | "$" | <LETTER> | <DIGIT> | <UNDERSCORE>)*
                     | ("_" ("_" | "$" | <LETTER> | <DIGIT> | <UNDERSCORE>)+) >
    |   < LETTER: ["a"-"z","A"-"Z"] >
    |   < UNDERSCORE: "_" >
    |   < INTEGERLITERAL: (<DIGIT>)+ >
    |   < DIGIT: ["0"-"9"] >

}


SimpleNode Program(): {}
{
    ImportDeclaration() Class() <EOF> { return jjtThis; }
}


void ImportDeclaration() #Imports: {}
{
    (<IMPORT> ImportNames() <SEMICOLON> )*
}

void ImportNames() : {Token t1, t2;}
{
    t1 = <IDENTIFIER> {  jjtThis.put("name", t1.image); } #Identifier(true) (<DOT> t2 = <IDENTIFIER> {  jjtThis.put("name", t2.image); } #Identifier)*
}

void Class(): {}
{
    ClassDeclaration() <OPENBRACKET> ClassFields() (MethodDeclaration())* <CLOSEBRACKET>
}

void ClassDeclaration() : {Token t1, t2;}
{
    <CLASS> t1 = <IDENTIFIER> {  jjtThis.put("name", t1.image); } #Identifier [<EXTENDS> t2 = <IDENTIFIER> {  jjtThis.put("name", t2.image); } #Extends]
}

void ClassFields() : {}
{
    (VarDeclaration())*
}

void VarDeclaration() :{Token t;}
{
    Type() t = <IDENTIFIER> {  jjtThis.put("name", t.image); } #Identifier <SEMICOLON>
}

 void MethodDeclaration():{}
 {
    <PUBLIC> ( MethodGeneric() | MethodMain())
 }

 void MethodBody() : {}
{
    VarDeclarations() (Statement())*
}

void VarDeclarations() : {}
{
    (LOOKAHEAD(2) VarDeclaration())*
}

void MethodMain(): {}
{
    <STATIC> <VOID> <MAIN> <OPENCURVEBRACKET> StringArray() #MainParameters(1) <CLOSECURVEBRACKET>
    <OPENBRACKET>
        MethodBody()
    <CLOSEBRACKET>

}

void StringArray() : {Token t;}
{
    <STRING> <OPENSQUAREBRACKET> <CLOSESQUAREBRACKET> t = <IDENTIFIER> { jjtThis.put("name", t.image); } #Identifier
}

void MethodGeneric(): {Token t;}
{
    Type() t = <IDENTIFIER> {  jjtThis.put("name", t.image); } #Identifier <OPENCURVEBRACKET> MethodParameters() <CLOSECURVEBRACKET>
    <OPENBRACKET>
        MethodBody()
        Return()
    <CLOSEBRACKET>
}

void MethodParameters() : {}
{
     [MethodParameter() (<COMMA> MethodParameter() )*]
}

void MethodParameter() : {Token t;}
{
    Type() t = <IDENTIFIER> {jjtThis.put("name", t.image);} #Identifier(true)
}

void Return() : {}
{
    <RETURN> AndExpression() <SEMICOLON>
}

void Type(): {Token t; }
{
     t = <INTBRACKETS> { jjtThis.put("type", t.image); }
     | t = <BOOLEAN> { jjtThis.put("type", t.image); }
     | t = <INT> { jjtThis.put("type", t.image); }
     | t = <STRING> { jjtThis.put("type", t.image); }
     | t = <IDENTIFIER> { jjtThis.put("type", t.image); }
}

void AndExpression() #void : {}
{
   LessExpression() [<AND> AndExpression() #And(2)]
}

void LessExpression() #void : {}
{
    AddSubExpression() [<LESS> LessExpression() #Less(2)]
}

void AddSubExpression() #void : {}
{
    MultDivExpression() [(<SUM> AddSubExpression() #Add(2) | <SUB> AddSubExpression() #Sub(2))]
}

void MultDivExpression() #void : {}
{
    NotExpression() [(<MULT> MultDivExpression() #Mult(2) | <DIV> MultDivExpression() #Div(2))]
}

void NotExpression() #void : {}
{
    (<NOT> NotExpression() #Not(1)) | DotArrayExpression()
}

void DotArrayExpression() #void : {}
{
    ExpressionOthers() (<DOT> DotExpression() #Dot(2) | ArrayExpression() #ArrayAccess(2))*
}

void DotExpression() #void : {}
{
     <LENGTH> #Length | DotMethod()
}

void DotMethod() : {Token t;}
{
    t = <IDENTIFIER>  {  jjtThis.put("name", t.image); } #Identifier  ObjectMethodParameters()
}


void ObjectMethodParameters() : {}
{
    <OPENCURVEBRACKET> [AndExpression() (<COMMA> AndExpression())*] <CLOSECURVEBRACKET>
}

void ArrayExpression() #void : {}
{
    <OPENSQUAREBRACKET> AndExpression() <CLOSESQUAREBRACKET>
}

void Assignment() #void : {}
{
     IdOrArrayAccess() <EQUALS> AndExpression() #Assignment(2) <SEMICOLON>
}

void IdOrArrayAccess() #void: {Token t;}
{
    LOOKAHEAD(2) ArrayAssignment() |
    LOOKAHEAD(2) t = <IDENTIFIER> {  jjtThis.put("name", t.image); } #Identifier
}

void ArrayAssignment() : {Token t;}
{
    t = <IDENTIFIER> { jjtThis.put("name", t.image); }  #Identifier  ArrayExpression() #ArrayExpression
}

void ExpressionOthers() #void : {Token t;}
{
     t = <IDENTIFIER> {  jjtThis.put("name", t.image); } #Identifier
     | t = <INTEGERLITERAL> { jjtThis.put("value", t.image); } #Number
     | <TRUE> #True
     | <FALSE>  #False
     | <THIS>  #This
     | NewExpression()
     | <OPENCURVEBRACKET> AndExpression() <CLOSECURVEBRACKET>
}

void NewExpression() : {Token t;}
{
    <NEW> (<INT> <OPENSQUAREBRACKET> AndExpression() <CLOSESQUAREBRACKET>
        | t = <IDENTIFIER> {  jjtThis.put("name", t.image); } #Identifier  <OPENCURVEBRACKET> <CLOSECURVEBRACKET>)
}

void Statement() #void: {}
{
    <OPENBRACKET> (Statement())* <CLOSEBRACKET>
    | IfElseStatement()
    | LOOKAHEAD(2) Assignment()
    | LOOKAHEAD(2) AndExpression() <SEMICOLON>
    | WhileStatment()
}

void IfElseStatement() #IfElse: {}
{
    <IF> <OPENCURVEBRACKET> AndExpression() <CLOSECURVEBRACKET> Statement() <ELSE> Statement()
}

void WhileStatment() #WhileStatment : {}
{
    <WHILE> <OPENCURVEBRACKET>
    try{
         AndExpression() <CLOSECURVEBRACKET>
    } catch(ParseException e){
        hasError = true;
        int lineError = e.getStackTrace()[0].getLineNumber();
        String message = e.getMessage();
        reportList.add(new Report(ReportType.ERROR, Stage.SYNTATIC, lineError, message));

        Token t;
        int counter = 0;
        while(true) {
           t = getToken(1);

           if (t.kind != OPENBRACKET) getNextToken();
           else break;  // found a {

           // Consecutives ). Init new while.
           if (t.kind == CLOSECURVEBRACKET) break;
        }

        // Consume all consecutives ) if exists.
        while(t.kind == CLOSECURVEBRACKET){
            t = getToken(1);
            if (t.kind == CLOSECURVEBRACKET) t = getNextToken();
        }

    }
     Statement()

}
