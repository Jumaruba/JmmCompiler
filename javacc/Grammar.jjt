options
{
    LOOKAHEAD = 1;
}
PARSER_BEGIN(Grammar)

import pt.up.fe.comp.jmm.report.Report;
// TODO: import.

public class Grammar{
    //private List<Report> report = new ArrayList<>();
    // TODO: get report
    /* List<Report> getReport(){
    }*/
}

PARSER_END(Grammar)

// See https://javacc.github.io/javacc/tutorials/token-manager.html
// Special tokens are like tokens, except that they are permitted to appear anywhere in the input file.
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT:"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
}

SKIP :
{
	" " | "\r" | "\t"  | "\n"
	| "/*" : WithinComment
}

// Goes to the withinComment state.
<WithinComment> SKIP:
{
    "*/": DEFAULT   // Exiting the skip state.
}

// Continues on the WithinState while...
<WithinComment> MORE : {
    <~[]>
}

TOKEN:
{
    <IMPORT: "import">

    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < INTBRACKETS: "int[]">
    |   < STRING: "String" >

    |   < COMMA: "," >
    |   < DOT: ".">
    |   < COLON: ":" >
    |   < SEMICOLON: ";" >
    |   < OPENSQUAREBRACKET: "[">
    |   < CLOSESQUAREBRACKET: "]">
    |   < OPENCURVEBRACKET: "(">
    |   < CLOSECURVEBRACKET: ")">
    |   < OPENBRACKET: "{">
    |   < CLOSEBRACKET: "}">

    |   < CLASS: "class">
    |   < PUBLIC: "public">
    |   < STATIC: "static">
    |   < VOID: "void">
    |   < MAIN: "main">
    |   < PRINTLN: "System.out.println" >
    |   < THIS: "this" >
    |   < EXTENDS: "extends" >
    |   < RETURN: "return" >
    |   < LENGTH: "length">
    |   < NEW: "new">

    |   < TRUE: "true">
    |   < FALSE: "false">
    |   < NOT: "!">
    |   < AND: "&&">
    |   < LESS: "<" >
    |   < SUM: "+">
    |   < SUB: "-">
    |   < MULT: "*">
    |   < DIV: "/">
    |   < EQUALS: "=">


    |   < IF: "if">
    |   < ELSE: "else">
    |   < WHILE: "while">

    |   < IDENTIFIER:  ("$" | <LETTER>) ("_" | "$" | <LETTER> | <DIGIT> | <UNDERSCORE>)*
                     | ("_" ("_" | "$" | <LETTER> | <DIGIT> | <UNDERSCORE>)+) >
    |   < LETTER: ["a"-"z","A"-"Z"] >
    |   < UNDERSCORE: "_" >
    |   < INTEGERLITERAL: (<DIGIT>)+ >
    |   < DIGIT: ["0"-"9"] >

}


SimpleNode Program(): {}
{
    ImportDeclaration() ClassDeclaration() <EOF> { return jjtThis; }
}

void ImportDeclaration(): {}
{
    (<IMPORT> [<STATIC>] <IDENTIFIER> (LOOKAHEAD(2) <DOT> <IDENTIFIER>)* [<DOT> <MULT>] <SEMICOLON> )*
}


void ClassDeclaration(): {}
{
    <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>] <OPENBRACKET> (VarDeclaration())* (MethodDeclaration())* <CLOSEBRACKET>
}


void VarDeclaration() :{}
{
    Type() <IDENTIFIER> #identifier <SEMICOLON>
}

 void MethodDeclaration():{}
 {
    <PUBLIC> ( MethodGeneric() | MethodMain())
 }

 void MethodBody() : {}
{
    (LOOKAHEAD(2) VarDeclaration())* (Statement())*
}

void MethodMain(): {}
{
    <STATIC> <VOID> <MAIN> <OPENCURVEBRACKET> StringArray() <CLOSECURVEBRACKET>
    <OPENBRACKET>
        MethodBody()
    <CLOSEBRACKET>

}

void StringArray() : {}
{
    <STRING> <OPENSQUAREBRACKET> <CLOSESQUAREBRACKET> <IDENTIFIER>
}

void MethodGeneric(): {}
{
    Type() <IDENTIFIER> <OPENCURVEBRACKET> [Arguments()] <CLOSECURVEBRACKET>
    <OPENBRACKET>
        MethodBody()
        Return()
    <CLOSEBRACKET>
}

void Arguments() : {}
{
    Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*
}

void Return() : {}
{
    <RETURN> Expression() <SEMICOLON>
}

void Type(): {}
{
    <INTBRACKETS> | <BOOLEAN> | <INT> | <STRING> | <IDENTIFIER>
}


void Expression() #void: {}
{
     <INTEGERLITERAL> Expression1()
    | <TRUE> Expression1()
    | <FALSE> Expression1()
    | <IDENTIFIER> Expression1()
    | <THIS> Expression1()
    | <NEW> ( <INT> <OPENSQUAREBRACKET> Expression() <CLOSESQUAREBRACKET> Expression1() | <IDENTIFIER> <OPENCURVEBRACKET> <CLOSECURVEBRACKET> Expression1())
    | <NOT> Expression() Expression1()
    | <OPENCURVEBRACKET> Expression() <CLOSECURVEBRACKET> Expression1()
}

void Expression1() #void: {}
{
    (<AND> | <LESS> | <SUM> | <SUB> | <MULT> | <DIV>) Expression() Expression1()
    | <OPENSQUAREBRACKET> Expression() <CLOSESQUAREBRACKET> Expression1()
    | <DOT> (<LENGTH> Expression1() | <IDENTIFIER> <OPENCURVEBRACKET> [Expression() (<COMMA> Expression())*] <CLOSECURVEBRACKET> Expression1())
    | {}
}

/*
void Statement() #Statment: {}
{
    <OPENBRACKET> (Statement())* <CLOSEBRACKET>
    | IfElseStatement()
    | WhileStatment()
    // TODO: error with a[2] = a.length; or a = a[2].length;

    | Expression , ";"
    | Identifier , "=" , Expression , ";"
    | Identifier , "[" , Expression , "]" , "=" , Expression , ";"


    | LOOKAHEAD(2) Expression() <SEMICOLON>
    | LOOKAHEAD(2) <IDENTIFIER> <OPENSQUAREBRACKET> Expression() <CLOSESQUAREBRACKET> Assignment() <SEMICOLON>
    | LOOKAHEAD(2) <IDENTIFIER> Assignment() <SEMICOLON>
}
*/

void Statement() #void: {}
{
    <OPENBRACKET> (Statement())* <CLOSEBRACKET>
    | <IF> <OPENCURVEBRACKET> Expression() <CLOSECURVEBRACKET> Statement() <ELSE> Statement()
    | LOOKAHEAD(2) <IDENTIFIER> (<EQUALS> Expression() <SEMICOLON> | <OPENSQUAREBRACKET> Expression() <CLOSESQUAREBRACKET> <EQUALS> Expression() <SEMICOLON>)
    | LOOKAHEAD(2) Expression() <SEMICOLON>
    | WhileStatment()
}



void IfElseStatement() #IfElse: {}
{
    <IF> <OPENCURVEBRACKET> Expression() <CLOSECURVEBRACKET> Statement() <ELSE> Statement()
}

void Assignment() #Assignment: {}
{
    <EQUALS> Expression()
}

// TODO: in the future improve. Access the report.
void WhileStatment() #WhileStatment : {}
{
    <WHILE> <OPENCURVEBRACKET>
    try{
         Expression() <CLOSECURVEBRACKET>
    } catch(ParseException e){
        System.out.println(e.toString()) ;
        Token t;
        int counter = 0;
        int openCurvedCounter = 1, closeCurvedCounter= 0;
        Boolean NotMatch = false;

        do {
           t = getToken(1);

           if (t.kind != OPENBRACKET) getNextToken();
           else break;
           if (t.kind == OPENCURVEBRACKET) openCurvedCounter++;
           else if (t.kind == CLOSECURVEBRACKET) closeCurvedCounter++;


        } while (openCurvedCounter != closeCurvedCounter && t.kind != EOF);
    }
    Statement()
}
