options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Calculator)


public class Calculator
{
    public static void main(String args[]) throws ParseException {
      	System.out.println("Write an arithmetic expression:");
		Calculator myCalc = new Calculator(System.in);
		SimpleNode root = myCalc.Expression(); // returns reference to root node
        	
		root.dump(""); // prints the tree on the screen

		//System.out.println("Expression value: "+myCalc.eval(root));
    }
	
}

PARSER_END(Calculator)

SKIP :
{
	" " | "\r" | "\t" | "\n"
}

TOKEN:
{
        < LETTER: ["a"-"z","A"-"Z"] >
    |   < DIGIT: ["0"-"9"] >
    |   < UNDERSCORE: "_" >

    |   < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | <UNDERSCORE>)* >
    |   < INTEGERLITERAL: (<DIGIT>)+ >
    |   < VARDECLARATION: (<TYPE> | <IDENTIFIER> | ";") >

    |   < TYPE: ("int[]" | <INT> | <BOOLEAN> | <IDENTIFIER> ) >
    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < STRING: "String">

    |   < COMMA: "," >
    |   < DOT: ".">
    |   < COLON: ":" >
    |   < SEMICOLON: ";" >
    |   < OPENSQUAREBRACKET: "[">
    |   < CLOSESQUAREBRACKET: "]">
    |   < OPENBRACKET: "{">
    |   < CLOSEBRACKET: "}">

    |   < CLASS: "class">
    |   < PUBLIC: "public">
    |   < STATIC: "static">
    |   < VOID: "void">
    |   < MAIN: "main">
    |   < PRINTLN: "System.out.println" >
    |   < THIS: "this" >
    |   < EXTENDS: "extends" >
    |   < RETURN: "return" >
    |   < LENGTH: "length">
    |   < NEW: "new">

    |   < TRUE: "true">
    |   < FALSE: "false">
    |   < NOT: "!">
    |   < AND: "&&">
    |   < LESS: "<" >
    |   < SUM: "+">
    |   < SUB: "-">
    |   < MULT: "*">
    |   < EQUALS: "=">
    |   < IF: "if">
    |   < ELSE: "else">
}



SimpleNode Expression(): {}
{
   Expr1() <LF>  {return jjtThis;} // Java code inside brackets
}

void Expr1() #void: {}
{
   Expr2(1) [
   	("+" Expr2(1) #Add(2)
   	| "-" Expr2(1) #Sub(2)
   	)
   	
   ]
}

void Expr2(int sign) #void: {} // 1: positive; -1: negative, because of the ‘-‘ unitary operator
{
   Expr3(sign)  [
   ("*" Expr3(1) #Mul(2) 
   | "/" Expr3(1) #Div(2)
   )
   
   ]
/*
   Expr3(sign) [
   ("*" #Mul(2)
   | "/" #Div(2)
   )
   Expr3(1)
   ]
   */
   
}

void Expr3(int sign) #void: {Token t;}
{
    t=<INTEGER> {  jjtThis.val = sign *Integer.parseInt(t.image); } #Term
    | "-" Expr3(-1)
    | "(" Expr1() ")"
}
