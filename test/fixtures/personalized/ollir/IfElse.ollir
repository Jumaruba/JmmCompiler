Fac{
	.construct Fac().V {
		invokespecial(this, "<init>").V;
	}
	.method public compFac(num.i32).i32{
		if ($1.num.i32 <.i32 1.i32) goto then1;
		else1:
			num_aux.i32 :=.i32 4.i32;
			if ($1.num.i32 <.i32 1.i32) goto then2;
			else2:
				num_aux.i32 :=.i32 4.i32;
				t1.i32 :=.i32 $1.num.i32 -.i32 1.i32;
				t2.i32 :=.i32 invokevirtual(this,"compFac", t1.i32).i32;
				num_aux.i32 :=.i32 $1.num.i32 *.i32 t2.i32;
				goto endif2;
			then2:
				num_aux.i32 :=.i32 2.i32;
				num_aux.i32 :=.i32 1.i32;
			endif2:
				t3.i32 :=.i32 $1.num.i32 -.i32 1.i32;
				t4.i32 :=.i32 invokevirtual(this,"compFac", t3.i32).i32;
				num_aux.i32 :=.i32 $1.num.i32 *.i32 t4.i32;
				goto endif1;
		then1:
			if ($1.num.i32 <.i32 1.i32) goto then3;
			else3:
				num_aux.i32 :=.i32 4.i32;
				t5.i32 :=.i32 $1.num.i32 -.i32 1.i32;
				t6.i32 :=.i32 invokevirtual(this,"compFac", t5.i32).i32;
				num_aux.i32 :=.i32 $1.num.i32 *.i32 t6.i32;
				goto endif3;
			then3:
				num_aux.i32 :=.i32 2.i32;
				num_aux.i32 :=.i32 1.i32;
			endif3:
				num_aux.i32 :=.i32 2.i32;
				num_aux.i32 :=.i32 1.i32;
		endif1:
			ret.i32 num_aux.i32;
	}
}